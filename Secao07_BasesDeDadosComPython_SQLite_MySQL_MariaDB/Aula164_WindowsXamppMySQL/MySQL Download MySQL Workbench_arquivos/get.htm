<html data-darkreader-mode="dynamic" data-darkreader-scheme="dark" class=" ecyzia idc0_340"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8"><style class="darkreader darkreader--fallback" media="screen"></style><style class="darkreader darkreader--text" media="screen"></style><style class="darkreader darkreader--invert" media="screen">.jfk-bubble.gtx-bubble, .captcheck_answer_label > input + img, span#closed_text > img[src^="https://www.gstatic.com/images/branding/googlelogo"], span[data-href^="https://www.hcaptcha.com/"] > #icon, #bit-notification-bar-iframe, ::-webkit-calendar-picker-indicator {
    filter: invert(100%) hue-rotate(180deg) contrast(90%) grayscale(50%) !important;
}</style><style class="darkreader darkreader--inline" media="screen">[data-darkreader-inline-bgcolor] {
  background-color: var(--darkreader-inline-bgcolor) !important;
}
[data-darkreader-inline-bgimage] {
  background-image: var(--darkreader-inline-bgimage) !important;
}
[data-darkreader-inline-border] {
  border-color: var(--darkreader-inline-border) !important;
}
[data-darkreader-inline-border-bottom] {
  border-bottom-color: var(--darkreader-inline-border-bottom) !important;
}
[data-darkreader-inline-border-left] {
  border-left-color: var(--darkreader-inline-border-left) !important;
}
[data-darkreader-inline-border-right] {
  border-right-color: var(--darkreader-inline-border-right) !important;
}
[data-darkreader-inline-border-top] {
  border-top-color: var(--darkreader-inline-border-top) !important;
}
[data-darkreader-inline-boxshadow] {
  box-shadow: var(--darkreader-inline-boxshadow) !important;
}
[data-darkreader-inline-color] {
  color: var(--darkreader-inline-color) !important;
}
[data-darkreader-inline-fill] {
  fill: var(--darkreader-inline-fill) !important;
}
[data-darkreader-inline-stroke] {
  stroke: var(--darkreader-inline-stroke) !important;
}
[data-darkreader-inline-outline] {
  outline-color: var(--darkreader-inline-outline) !important;
}
[data-darkreader-inline-stopcolor] {
  stop-color: var(--darkreader-inline-stopcolor) !important;
}</style><style class="darkreader darkreader--variables" media="screen">:root {
   --darkreader-neutral-background: #141515;
   --darkreader-neutral-text: #d6d4d2;
   --darkreader-selection-background: #004daa;
   --darkreader-selection-text: #e8e6e3;
}</style><style class="darkreader darkreader--root-vars" media="screen"></style><style class="darkreader darkreader--user-agent" media="screen">html {
    color-scheme: dark !important;
}
html, body {
    border-color: #6f6b65;
    color: #e7e6e5;
}
a {
    color: #5c8bc2;
}
table {
    border-color: #575a5c;
}
::placeholder {
    color: #afaba6;
}
input:-webkit-autofill,
textarea:-webkit-autofill,
select:-webkit-autofill {
    background-color: #3f411f !important;
    color: #e7e6e5 !important;
}
::-webkit-scrollbar {
    background-color: #212323;
    color: #a8a49f;
}
::-webkit-scrollbar-thumb {
    background-color: #474a4b;
}
::-webkit-scrollbar-thumb:hover {
    background-color: #5a5d5f;
}
::-webkit-scrollbar-thumb:active {
    background-color: #4a4d4f;
}
::-webkit-scrollbar-corner {
    background-color: #191a1a;
}
* {
    scrollbar-color: #474a4b #212323;
}
::selection {
    background-color: #004daa !important;
    color: #e8e6e3 !important;
}
::-moz-selection {
    background-color: #004daa !important;
    color: #e8e6e3 !important;
}</style>
    <script>
        (function() {
            var COOKIE_NS = "truste.consent.";
            var PARAM_MAP = initParameterMap(location.href);
            var GROUP_PREF_NAME = PARAM_MAP.domain;

            function initParameterMap(url) {
                var map = {};
                var i,url = map["_url"] = url;
                url = (map["_query"] = url.replace(/^[^;?#]*[;?#]/,"")).replace(/[#;?&]+/g,"&");
                if (url) {
                    for ( url = url.split('&'), i = url.length; i-- > 0;) {
                        var s = url[i].split('='),
                                param = s.shift();
                        if (!map[param]) {
                            map[param] = (s.length) ? decodeURIComponent(s.join('=')): "";
                        }
                    }
                }
                return map;
            }

             function postMessageToParent(msg, data) {
               var ob = JSON.stringify({
                            source: "preference_manager",
                            message: msg,
                            data: data
                        });
                 top.postMessage(ob,"*");
                 parent.postMessage(ob,"*");
            }

            function addEventListener(ob,eventName,fxn,callOnFail, useCapture) {
                useCapture = useCapture ? true : false;
                if(ob && typeof eventName == "string" && fxn instanceof Function){
                    if(ob.addEventListener){
                        ob.addEventListener(eventName, fxn, useCapture);
                    }else if(ob.attachEvent){
                        ob.attachEvent("on"+eventName, fxn);
                    }else if(callOnFail) fxn();
                }
            }

            function getStorage(key) {
                var _item = null;
                try {
                    var _storage = self.localStorage;
                    _item = (_storage.getItem) ? _storage.getItem(key):_storage[key];
                } catch (e) {
                    //console.log("Current browser does not support HTML5 Local Storage");
                }
                return _item && JSON.parse(_item) || null;
            }

            function readCookieStorage(name) {
                try{
                    var _key = COOKIE_NS+name;
                    var _cookieObj = getStorage(_key);
                    if(!_cookieObj) return null;

                    //Check for cookie expiration
                    var _cookieExp = new Date(_cookieObj.expires);
                    var _now = new Date();
                    if(_cookieExp < _now)
                        try{
                            self.localStorage.removeItem(_key);
                            return null;
                        }catch(e){/*do nothing*/ return null; }
                    return _cookieObj;

                }catch(e){
                    //truste.util.trace(e.message, e.stack);
                }
                return null;
            }

            function setStorage(key, value) {
                //get previous poptime
                var item = getStorage(key);
                if (!value.popTime && item && !!item.popTime) {
                    value.popTime = item.popTime;
                }
                var _value = (typeof value == "string" || value instanceof String)? value: JSON.stringify(value);
                try{
                    var _storage = self.localStorage;
                    if(_storage.setItem)
                        _storage.setItem(key,_value);
                    else
                        _storage[key] = _value;
                }catch(e){
                   // console.log("Current browser does not support HTML5 Local Storage");
                }
            }

            function createCookieStorage (name, value, exp, popTime) {
                var _cookie = {};

                _cookie.value = value;

                //?If expiration equals '0' set as session cookie
                if(exp=='0'){ _cookie.expires = exp; }
                //?If is a custom value, use that value
                else if(exp)
                {
                    var _date = new Date();
                    _date.setDate(_date.getDate() + exp);
                    if(isNaN((_date=_date.getTime() + (_date.getTimezoneOffset() * 60000)))) throw new Error("Invalid Date String");
                    _cookie.expires = _date;
                } else {
                    var _date = new Date();
                    _date.setDate(_date.getDate() + 395);
                    _cookie.expires = _date;
                }

                if (popTime) {
                    _cookie.popTime = popTime;
                }

                setStorage(COOKIE_NS + name, _cookie);
            }


            function actMessage(prefData) {
                if (prefData && typeof GROUP_PREF_NAME !== 'undefined') {
                    try {
                        prefData = (typeof prefData.data === 'string') ? JSON.parse(prefData.data) : prefData.data;
                    }catch(exp) {
                        //if data cannot be parsed don't proceed
                        return;
                    }
                    if (prefData.source == 'notice_js') {
                        switch (prefData.message) {
                            case 'setPreference':
                                if (prefData.data){
                                    var consent = prefData.data.split(':');
                                    if (/^[0-9]([,|][0-9])*$/.test(consent[0])) {
                                        if (!consent[2] || (consent[2] && /^(expressed|implied).(eu|us)?$/.test(consent[2]))){
                                            createCookieStorage(GROUP_PREF_NAME, prefData.data, prefData.cookieExpiry, prefData.popTime);
                                        }
                                    }
                                }
                                break;
                            case 'getPreference':
                                var droppedCookie = readCookieStorage(GROUP_PREF_NAME);
                                    postMessageToParent('cookie_data', droppedCookie || {});
                                break;
                            case 'updatePreference':
                                var oldData = readCookieStorage(GROUP_PREF_NAME);
                                if (oldData) {
                                    oldData.cmapiPrvcy = prefData.cmapiPrvcy;
                                    oldData.cmapiBl = prefData.cmapiBl;

                                    setStorage(COOKIE_NS + GROUP_PREF_NAME, oldData);
                                }

                                break;
                        }
                    }
                }
            }

            if (typeof GROUP_PREF_NAME !== 'undefined') {
                var droppedCookie = readCookieStorage(GROUP_PREF_NAME);
                postMessageToParent('cookie_data', droppedCookie || {});
            }
            addEventListener(window,'message',actMessage);
        })();
    </script>
<meta name="darkreader" content="2b12ea10f0fd41cfaa0cd869240bf1c3"><style class="darkreader darkreader--override" media="screen">.vimvixen-hint {
    background-color: #68541f !important;
    border-color: #c2ae60 !important;
    color: #ede8d8 !important;
}
::placeholder {
    opacity: 0.5 !important;
}
#edge-translate-panel-body,
.MuiTypography-body1 {
    color: var(--darkreader-neutral-text) !important;
}
gr-main-header {
    background-color: #21363d !important;
}
.tou-z65h9k,
.tou-mignzq,
.tou-1b6i2ox,
.tou-lnqlqk {
    background-color: var(--darkreader-neutral-background) !important;
}
.tou-75mvi {
    background-color: #0f1d22 !important;
}
.tou-ta9e87,
.tou-1w3fhi0,
.tou-1b8t2us,
.tou-py7lfi,
.tou-1lpmd9d,
.tou-1frrtv8,
.tou-17ezmgn {
    background-color: #0a0a0a !important;
}
.tou-uknfeu {
    background-color: #1d160d !important;
}
.tou-6i3zyv {
    background-color: #32515c !important;
}
embed[type="application/pdf"] { filter: invert(100%) contrast(90%); }</style></head>
<body>


</body></html>